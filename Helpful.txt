MASSIV

#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
int main(int)
{
    const int N = 100;
    int* M;
    int i, n;
    float summa, av;

    printf("Variant 4 a)\n");
    n = 10;
    srand(time(NULL));
    M = (int*)malloc(n * sizeof(int));
    for (i = 0; i < n; i++)
    {
        M[i] = rand() % 20 + (-10);
    }

    summa = 0;

    for (i = 0; i < n; i++) {
        summa = summa + M[i];
    }

    av = summa / 10;

    for (i = 0; i < n; i++)
        printf("%d\n", M[i]);
    printf("\nSumma =" " %f", summa);
    printf("\nAverage =" " %f", av);

     free(A)
    _getch();
}





MATRICA
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
int main(int)
{
    int i, j, n1, n2, max, sum, index;
    int* N;
    index = 0;
    max = 0;
    n1 = 6;
    n2 = 5;
    srand(time(NULL));
    N = (int*)malloc(n1 * n2 * sizeof(int));
if (N == NULL)
    {
        printf("Net mesta");
        exit;
    }

    for (i = 0; i < n1; i++)
    {
        for (j = 0; j < n2; j++)
        {
            *(N + i * n2 + j) = rand() % 10;
        }
    }

    for (i = 0; i < n1; i++)
    {
        for (j = 0; j < n2; j++)
        {
            printf("%5d ", *(N + i * n2 + j));
        }
        printf("\n");
    }

    for (i = 0; i < n1; i++)
    {
        sum = 0;
        for (j = 0; j < n2; j++)
        {
            sum = sum + *(N + i * n2 + j);
            if (sum >= max)
            {
                max = sum;
                index = i + 1;
            }
        }
    }
    printf("\n");
    printf("Nomer stroki = %d ", index);
    free(N);
    _getch();
}










FAILY
Первые 10 заданий:

#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <string.h>
#include <filesystem>

int wmain(int argc, wchar_t* argv[]) {

    if (argc < 6)
    {
        exit;
    }

    DWORD bytesWritten;
    char readBuffer[256];
    DWORD bytesRead;
    char buffer[256] = "Eto vsyo prosto test";
    
    LPCWSTR path = argv[1];


    printf("This will be written into file: %s\n", buffer);


    //Создание файла

    HANDLE file = CreateFile(path, GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_ALWAYS, NULL, NULL);
    if (file == INVALID_HANDLE_VALUE) {
        printf("File not opened.\n");
        exit(EXIT_FAILURE);
    }
    else {
        printf("File opened.\n");
    }

    if (WriteFile(file, buffer, sizeof(buffer), &bytesWritten, NULL)) {
        printf("File written to.\n");
    }
    else {
        printf("File not written to.\n");
    }


    if (CloseHandle(file)) {
        printf("File closed.\n");
    }
    else {
        printf("File not closed.\n");
    }

    //Чтение файла

    HANDLE rfile = CreateFile(path, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

    if (rfile != INVALID_HANDLE_VALUE) {
        printf("File opened for reading!\n");
    }
    else {
        printf("File not opened for reading!\n");
        exit(EXIT_FAILURE);
    }

    if (ReadFile(rfile, readBuffer, sizeof(readBuffer), &bytesRead, NULL)) {
        printf("File successfully read!\n");
        printf("%d bytes read.\n", bytesRead);
        printf("\n%s\n", readBuffer);
    }
    CloseHandle(rfile);

    //Удаление файла

    char yesno[2];
    printf("\nDelete file?: ");
    gets_s(yesno);
    if (strcmp(yesno, "y") == 0)
    {
        if (DeleteFileW(path))
        {
            printf("File deleted\n");
        }
        else printf("File is still there\n");
    }
    else printf("File is still there\n");

    //Переименование файла

    LPCWSTR newpath = argv[2];

    printf("\nRename file?: ");
    gets_s(yesno);
    if (strcmp(yesno, "y") == 0)
    {
        if (CopyFile(path, newpath, true))
        {
            DeleteFile(path);
            printf("File renamed\n");
        }
        else printf("Rename not complete\n");
    }
    else printf("Rename not complete\n");

    //Копирование файла в другую папку

    LPCWSTR copypath = argv[3];

    printf("\nCopy file?: ");
    gets_s(yesno);
    if (strcmp(yesno, "y") == 0)
    {
        if (CopyFile(path, copypath, true))
        {
            printf("File copied\n");
        }
        else printf("Copy not complete\n");
    }
    else printf("Copy not complete\n");

    //Вывод размера, атрибутов


    HANDLE sfile = CreateFile(path, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    int size = GetFileSize(sfile, NULL);
    printf("\nFile size: %d\n", size);
    DWORD attr = GetFileAttributes(path);
    printf("\nFile attributes: %u\n", attr);
    CloseHandle(sfile);

    //Установка атрибута "Только для чтения"

 /* SetFileAttributes(path, FILE_ATTRIBUTE_READONLY);
    DWORD roattr = GetFileAttributes(path);
    printf("\nFile attributes: %u\n", roattr);

    //Установка атрибута "Скрытый"

    SetFileAttributes(path, FILE_ATTRIBUTE_HIDDEN);
    DWORD hiattr = GetFileAttributes(path);
    printf("\nFile attributes: %u\n", hiattr);*/

    // Вывести на экран содержимое папки

    WIN32_FIND_DATAW wfd;
    LPCWSTR fpath = argv[4];
    HANDLE const hFind = FindFirstFile(fpath, &wfd);
    do
    {
        printf("%S\n", &wfd.cFileName[0]);
    } while (NULL != FindNextFile(hFind, &wfd));
    FindClose(hFind);

    //Создать папку в текущей папке

    LPCWSTR dpath = argv[5];

    if (CreateDirectory(dpath, NULL))
        printf("\nNovaya papochka tut'\n");
    else
        printf("\nNet novoy papochky(\n");

    //Переместить файл из папки в другую

    LPCWSTR perepath = argv[6];

    printf("\nMove file?: ");
    gets_s(yesno);
    if (strcmp(yesno, "y") == 0)
    {
        if (CopyFile(path, perepath, true))
        {
            DeleteFile(path);
            printf("File movied\n");
        }
        else printf("File not moved\n");
    }


    _getch();

}











Вторые 5 заданий:
Отсортировать по убыванию содержимое числового файла:
#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <string.h>
#include <ctype.h>

int main() {
    HANDLE myFile = CreateFile(L"C://Users/nyanp/Desktop/test.txt", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0);
    printf("Descriptor = %d", myFile);
    DWORD myFileSize = GetFileSize(myFile, NULL);
    printf("\nSize = %u", myFileSize);
    HANDLE myFileMapping = CreateFileMapping(myFile, NULL, PAGE_READWRITE, 0, 0, L"C://Users/nyanp/Desktop/MyFileMapping.txt");
    printf("\nFile mapping = %d", myFileMapping);
    LPVOID myFileMapView = MapViewOfFile(myFileMapping, FILE_MAP_WRITE, 0, 0, 0);
    printf("\nMap view = %d", myFileMapView);
    printf("\n");
    char* myFileMemory = new char[myFileSize];
    CopyMemory(myFileMemory, myFileMapView, myFileSize);
    int i;
    int j;
    int temp;
    for (i = 0; i < myFileSize-1; i++)
        for (j = 1; j < myFileSize; j++)
    {
            if (myFileMemory[i] < myFileMemory[j])
            {
                temp = myFileMemory[i];
                myFileMemory[i] = myFileMemory[j];
                myFileMemory[j] = temp;
            }
    }
    CopyMemory(myFileMapView, myFileMemory, myFileSize);
    if (!UnmapViewOfFile(myFileMapView))
        printf("\nError, memory not cleared");
    else
        printf("\nMemory cleared");
    if (!CloseHandle(myFile))
        printf("\nHandle not closed");
    else
        printf("\nHandle closed");
    _getch();

}









Найти максимальное число в файле:
#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <string.h>
#include <ctype.h>

int main() {
    HANDLE myFile = CreateFile(L"C://Users/nyanp/Desktop/test.txt", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0);
    printf("Descriptor = %d", myFile);
    DWORD myFileSize = GetFileSize(myFile, NULL);
    printf("\nSize = %u", myFileSize);
    HANDLE myFileMapping = CreateFileMapping(myFile, NULL, PAGE_READWRITE, 0, 0, L"C://Users/nyanp/Desktop/MyFileMapping.txt");
    printf("\nFile mapping = %d", myFileMapping);
    LPVOID myFileMapView = MapViewOfFile(myFileMapping, FILE_MAP_WRITE, 0, 0, 0);
    printf("\nMap view = %d", myFileMapView);
    printf("\n");
    char* myFileMemory = new char[myFileSize];
    CopyMemory(myFileMemory, myFileMapView, myFileSize);
    int max = 0;
    for (int i = 0; i < myFileSize; i++)
    {
        if ((int)myFileMemory[i] > max)
        {
            max = (int)myFileMemory[i];
        }
    }
    printf("\nMax = %c", (char)max);
    CopyMemory(myFileMapView, myFileMemory, myFileSize);
    if (!UnmapViewOfFile(myFileMapView))
        printf("\nError, memory not cleared");
    else
        printf("\nMemory cleared");
    if (!CloseHandle(myFile))
        printf("\nHandle not closed");
    else
        printf("\nHandle closed");
    _getch();

}












 Упорядочить буквы по алфавиту наоборот:
#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <string.h>
#include <ctype.h>

int main() {
    HANDLE myFile = CreateFile(L"C://Users/nyanp/Desktop/test.txt", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0);
    printf("Descriptor = %d", myFile);
    DWORD myFileSize = GetFileSize(myFile, NULL);
    printf("\nSize = %u", myFileSize);
    HANDLE myFileMapping = CreateFileMapping(myFile, NULL, PAGE_READWRITE, 0, 0, L"C://Users/nyanp/Desktop/MyFileMapping.txt");
    printf("\nFile mapping = %d", myFileMapping);
    LPVOID myFileMapView = MapViewOfFile(myFileMapping, FILE_MAP_WRITE, 0, 0, 0);
    printf("\nMap view = %d", myFileMapView);
    printf("\n");
    char* myFileMemory = new char[myFileSize];
    CopyMemory(myFileMemory, myFileMapView, myFileSize);
    char letter = myFileMemory[0];
    for (int i = 0; i < myFileSize; i++)
        for (int j = 1; j < myFileSize-1; j++)
    {
        if (myFileMemory[i] > myFileMemory[j])
        {
            letter = myFileMemory[i];
            myFileMemory[i] = myFileMemory[j];
            myFileMemory[j] = letter;
        }
    }
    CopyMemory(myFileMapView, myFileMemory, myFileSize);
    if (!UnmapViewOfFile(myFileMapView))
        printf("\nError, memory not cleared");
    else
        printf("\nMemory cleared");
    if (!CloseHandle(myFile))
        printf("\nHandle not closed");
    else
        printf("\nHandle closed");
    _getch();

}











Посчитать количество цифр в файле:
#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <string.h>
#include <ctype.h>

int main() {
    HANDLE myFile = CreateFile(L"C://Users/nyanp/Desktop/test.txt", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0);
    printf("Descriptor = %d", myFile);
    DWORD myFileSize = GetFileSize(myFile, NULL);
    printf("\nSize = %u", myFileSize);
    HANDLE myFileMapping = CreateFileMapping(myFile, NULL, PAGE_READWRITE, 0, 0, L"C://Users/nyanp/Desktop/MyFileMapping.txt");
    printf("\nFile mapping = %d", myFileMapping);
    LPVOID myFileMapView = MapViewOfFile(myFileMapping, FILE_MAP_WRITE, 0, 0, 0);
    printf("\nMap view = %d", myFileMapView);
    printf("\n");
    char* myFileMemory = new char[myFileSize];
    CopyMemory(myFileMemory, myFileMapView, myFileSize);
    int count = 0;
    for (int i = 0; i < myFileSize; i++)
    {
        if ((myFileMemory[i] == '0') || (myFileMemory[i] == '1') || (myFileMemory[i] == '2') || (myFileMemory[i] == '3') || (myFileMemory[i] == '4') || (myFileMemory[i] == '5') || (myFileMemory[i] == '6') || (myFileMemory[i] == '7') || (myFileMemory[i] == '8') || (myFileMemory[i] == '9'))
            count++;
    }
    printf("%d", count);
    CopyMemory(myFileMapView, myFileMemory, myFileSize);
    if (!UnmapViewOfFile(myFileMapView))
        printf("\nError, memory not cleared");
    else
        printf("\nMemory cleared");
    if (!CloseHandle(myFile))
        printf("\nHandle not closed");
    else
        printf("\nHandle closed");
    _getch();

}












Удалить буквы из текста:
#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <string.h>
#include <ctype.h>
int main() {
    HANDLE myFile = CreateFile(L"C://Users/nyanp/Desktop/test.txt", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0);
    printf("Descriptor = %d", myFile);
    DWORD myFileSize = GetFileSize(myFile, NULL);
    printf("\nSize = %u", myFileSize);
    HANDLE myFileMapping = CreateFileMapping(myFile, NULL, PAGE_READWRITE, 0, 0, L"C://Users/nyanp/Desktop/MyFileMapping.txt");
    printf("\nFile mapping = %d", myFileMapping);
    LPVOID myFileMapView = MapViewOfFile(myFileMapping, FILE_MAP_WRITE, 0, 0, 0);
    printf("\nMap view = %d", myFileMapView);
    printf("\n");
    char* myFileMemory = new char[myFileSize];
    CopyMemory(myFileMemory, myFileMapView, myFileSize);
    int count = 0;
    char b = ' ';
    for (int i = 0; i < myFileSize; i++)
    {
        if (myFileMemory[i] >= 'a' && myFileMemory[i] <= 'z')
            myFileMemory[i] = b;
    }
    CopyMemory(myFileMapView, myFileMemory, myFileSize);
    if (!UnmapViewOfFile(myFileMapView))
        printf("\nError, memory not cleared");
    else
        printf("\nMemory cleared");
    if (!CloseHandle(myFile))
        printf("\nHandle not closed");
    else
        printf("\nHandle closed");
    _getch();

}














#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <string.h>
#include <ctype.h>

int main() {
    HANDLE myFile = CreateFile(L"C://Users/nyanp/Desktop/test.txt", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0);
    printf("Descriptor = %d", myFile);
    DWORD myFileSize = GetFileSize(myFile, NULL);
    printf("\nSize = %u", myFileSize);
    HANDLE myFileMapping = CreateFileMapping(myFile, NULL, PAGE_READWRITE, 0, 0, L"C://Users/nyanp/Desktop/MyFileMapping.txt");
    printf("\nFile mapping = %d", myFileMapping);
    LPVOID myFileMapView = MapViewOfFile(myFileMapping, FILE_MAP_WRITE, 0, 0, 0);
    printf("\nMap view = %d", myFileMapView);
    printf("\n");
    char* myFileMemory = (char*)myFileMapView;// new char[myFileSize];
    //CopyMemory(myFileMemory, myFileMapView, myFileSize);
    int i;
    int j;
    int temp;
    for (i = 0; i < myFileSize - 1; i++)
        for (j = 1; j < myFileSize; j++)
        {
            if (myFileMemory[i] < myFileMemory[j])
            {
                temp = myFileMemory[i];
                myFileMemory[i] = myFileMemory[j];
                myFileMemory[j] = temp;
            }
        }
   // CopyMemory(myFileMapView, myFileMemory, myFileSize);
    if (!UnmapViewOfFile(myFileMapView))
        printf("\nError, memory not cleared");
    else
        printf("\nMemory cleared");
    if (!CloseHandle(myFile))
        printf("\nHandle not closed");
    else
        printf("\nHandle closed");
    _getch();

}



PROCESS
#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <string.h>
#include <filesystem>
#include <tchar.h>
int main()
{
    STARTUPINFO si;
    PROCESS_INFORMATION pi;

    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    wchar_t path[] = L"C:\\Program Files (x86)\\Windows Media Player\\wmplayer.exe C:/Users/nyanp/Downloads/Downlds/video.mp4";

//или wchar_t path[] = L"C:/Program Files/Google/Chrome/Application/chrome.exe https://www.youtube.com/watch?v=dQw4w9WgXcQ";

    CreateProcess(NULL, path, NULL, NULL, FALSE, NORMAL_PRIORITY_CLASS, NULL, NULL, &si, &pi);

    printf("Process created\n");

    WaitForSingleObject(pi.hProcess, INFINITE);

    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);

}








POTOKI
#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <string.h>
#include <filesystem>
#include <tchar.h>
#include <processthreadsapi.h>

#define WRITE_COUNT 10
#define READ_COUNT 10
DWORD bytesWritten;
char readBuffer[256];
DWORD bytesRead;
char buffer[256] = "This was written by Writer thread";
LPCWSTR path = L"C:/Users/nyanp/Desktop/write.txt";
int count = 0;
int i = 0;
int j = 0;
CRITICAL_SECTION section = { 0 };
DWORD WINAPI Writers(LPVOID param)
{
	EnterCriticalSection(&section);
	count++;
	printf("\nWrote stuff.\n");
		HANDLE file = CreateFile(path, GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_ALWAYS, NULL, NULL);
		SetFilePointer(file, NULL, NULL, FILE_END);
		if (WriteFile(file, buffer, sizeof(buffer), &bytesWritten, NULL)) {
			printf("'%s' written to file.\n", buffer);
			CloseHandle(file);
		}
		Sleep(1000);
		LeaveCriticalSection(&section);
		return 0;
	}

DWORD WINAPI Readers(LPVOID param)
{
	EnterCriticalSection(&section);
	if (count > 0)
	{
		printf("\nRead stuff.\n");
		HANDLE file = CreateFile(path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
		if (ReadFile(file, readBuffer, sizeof(readBuffer), &bytesRead, NULL)) {
			printf("'%s' read from file.\n", readBuffer);
			CloseHandle(file);
		}
	}
		Sleep(1000);
		LeaveCriticalSection(&section);
		return 0;
	}

int main()
{
	HANDLE threadsWriters[WRITE_COUNT] = { 0 };
	HANDLE threadsReaders[READ_COUNT] = { 0 };

	InitializeCriticalSection(&section);
	while (i != WRITE_COUNT && j < READ_COUNT)
	{
		for (i = 0; i < WRITE_COUNT; i++)
		{
			threadsWriters[i] = CreateThread(NULL, 0, Writers, 0, 0, 0);
		    threadsReaders[j] = CreateThread(NULL, 0, Readers, 0, 0, 0);
		}
	}

	WaitForMultipleObjects(WRITE_COUNT, threadsWriters, TRUE, INFINITE);
	WaitForMultipleObjects(READ_COUNT, threadsReaders, TRUE, INFINITE);
	for (i = 0; i < WRITE_COUNT; i++)
	{
		CloseHandle(threadsWriters[i]);
	}
	for (i = 0; i < READ_COUNT; i++)
	{
		CloseHandle(threadsReaders[i]);
	}
	DeleteCriticalSection(&section);
}







